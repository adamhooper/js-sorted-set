{"version":3,"file":"sorted-set.js","sources":["src/SortedSet/AbstractSortedSet.js","src/SortedSet/ArrayStrategy.js","src/SortedSet/BinaryTreeIterator.js","src/SortedSet/AbstractBinaryTreeStrategy.js","src/SortedSet/BinaryTreeStrategy.js","src/SortedSet/RedBlackTreeStrategy.js","src/SortedSet/InsertConflictResolvers.js","src/SortedSet.js"],"sourcesContent":["\nclass AbstractSortedSet {\n  constructor(options) {\n    if ((options != null ? options.strategy : void 0) == null) {\n      throw 'Must pass options.strategy, a strategy';\n    }\n    if ((options != null ? options.comparator : void 0) == null) {\n      throw 'Must pass options.comparator, a comparator';\n    }\n    if ((options != null ? options.onInsertConflict : void 0) == null) {\n      throw 'Must pass options.onInsertConflict, a function';\n    }\n    this.priv = new options.strategy(options);\n    this.length = 0;\n  }\n\n  insert(value) {\n    this.priv.insert(value);\n    this.length += 1;\n    return this;\n  }\n\n  remove(value) {\n    this.priv.remove(value);\n    this.length -= 1;\n    return this;\n  }\n\n  clear() {\n    this.priv.clear();\n    this.length = 0;\n    return this;\n  }\n\n  contains(value) {\n    return this.priv.contains(value);\n  }\n\n  // Returns this set as an Array\n  toArray() {\n    return this.priv.toArray();\n  }\n\n  forEach(callback, thisArg) {\n    this.priv.forEachImpl(callback, this, thisArg);\n    return this;\n  }\n\n  map(callback, thisArg) {\n    const ret = [];\n    this.forEach(function(value, index, self) {\n      return ret.push(callback.call(thisArg, value, index, self));\n    });\n    return ret;\n  }\n\n  filter(callback, thisArg) {\n    const ret = [];\n    this.forEach(function(value, index, self) {\n      if (callback.call(thisArg, value, index, self)) {\n        return ret.push(value);\n      }\n    });\n    return ret;\n  }\n\n  every(callback, thisArg) {\n    let ret = true;\n    this.forEach(function(value, index, self) {\n      if (ret && !callback.call(thisArg, value, index, self)) {\n        ret = false;\n      }\n    });\n    return ret;\n  }\n\n  some(callback, thisArg) {\n    let ret = false;\n    this.forEach(function(value, index, self) {\n      if (!ret && callback.call(thisArg, value, index, self)) {\n        ret = true;\n      }\n    });\n    return ret;\n  }\n\n  // An iterator is similar to a C++ iterator: it points _before_ a value.\n\n  // So in this sorted set:\n\n  //   | 1 | 2 | 3 | 4 | 5 |\n  //   ^a      ^b          ^c\n\n  // `a` is a pointer to the beginning of the iterator. `a.value()` returns\n  // `3`. `a.previous()` returns `null`. `a.setValue()` works, if\n  // `options.allowSetValue` is true.\n\n  // `b` is a pointer to the value `3`. `a.previous()` and `a.next()` both do\n  // the obvious.\n\n  // `c` is a pointer to the `null` value. `c.previous()` works; `c.next()`\n  // returns null. `c.setValue()` throws an exception, even if\n  // `options.allowSetValue` is true.\n\n  // Iterators have `hasNext()` and `hasPrevious()` methods, too.\n\n  // Iterators are immutible. `iterator.next()` returns a new iterator.\n\n  // Iterators become invalid as soon as `insert()` or `remove()` is called.\n  findIterator(value) {\n    return this.priv.findIterator(value);\n  }\n\n  // Finds an iterator pointing to the lowest possible value.\n  beginIterator() {\n    return this.priv.beginIterator();\n  }\n\n  // Finds an iterator pointing to the `null` value.\n  endIterator() {\n    return this.priv.endIterator();\n  }\n\n};\n\nexport default AbstractSortedSet;\n\n","\nclass Iterator {\n  constructor(priv, index1) {\n    this.priv = priv;\n    this.index = index1;\n    this.data = this.priv.data;\n  }\n\n  hasNext() {\n    return this.index < this.data.length;\n  }\n\n  hasPrevious() {\n    return this.index > 0;\n  }\n\n  value() {\n    if (this.index < this.data.length) {\n      return this.data[this.index];\n    } else {\n      return null;\n    }\n  }\n\n  setValue(value) {\n    if (!this.priv.options.allowSetValue) {\n      throw 'Must set options.allowSetValue';\n    }\n    if (!this.hasNext()) {\n      throw 'Cannot set value at end of set';\n    }\n    return this.data[this.index] = value;\n  }\n\n  next() {\n    if (this.index >= this.data.length) {\n      return null;\n    } else {\n      return new Iterator(this.priv, this.index + 1);\n    }\n  }\n\n  previous() {\n    if (this.index <= 0) {\n      return null;\n    } else {\n      return new Iterator(this.priv, this.index - 1);\n    }\n  }\n\n};\n\nconst binarySearchForIndex = (array, value, comparator) => {\n  let low = 0;\n  let high = array.length;\n  while (low < high) {\n    const mid = (low + high) >>> 1;\n    if (comparator(array[mid], value) < 0) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n  return low;\n};\n\nclass ArrayStrategy {\n  constructor(options) {\n    this.options = options;\n    this.onInsertConflict = this.options.onInsertConflict;\n    this.comparator = this.options.comparator;\n    this.data = [];\n  }\n\n  toArray() {\n    return this.data;\n  }\n\n  insert(value) {\n    const index = binarySearchForIndex(this.data, value, this.comparator);\n    if (this.data[index] !== void 0 && this.comparator(this.data[index], value) === 0) {\n      return this.data.splice(index, 1, this.onInsertConflict(this.data[index], value));\n    } else {\n      return this.data.splice(index, 0, value);\n    }\n  }\n\n  remove(value) {\n    const index = binarySearchForIndex(this.data, value, this.comparator);\n    if (this.comparator(this.data[index], value) !== 0) {\n      throw 'Value not in set';\n    }\n    return this.data.splice(index, 1);\n  }\n\n  clear() {\n    return this.data.length = 0;\n  }\n\n  contains(value) {\n    const index = binarySearchForIndex(this.data, value, this.comparator);\n    return this.index !== this.data.length && this.comparator(this.data[index], value) === 0;\n  }\n\n  forEachImpl(callback, sortedSet, thisArg) {\n    const data = this.data;\n    const len = data.length;\n    for (let i = 0; i < len; i++) {\n      callback.call(thisArg, data[i], i, sortedSet);\n    }\n  }\n\n  findIterator(value) {\n    const index = binarySearchForIndex(this.data, value, this.comparator);\n    return new Iterator(this, index);\n  }\n\n  beginIterator() {\n    return new Iterator(this, 0);\n  }\n\n  endIterator() {\n    return new Iterator(this, this.data.length);\n  }\n};\n\nexport default ArrayStrategy;\n","const descendAllTheWay = (leftOrRight, node) => {\n  // Assumes node._iteratorParentNode is set\n  while (node[leftOrRight] !== null) {\n    const parent = node;\n    node = node[leftOrRight];\n    node._iteratorParentNode = parent;\n  }\n  return node;\n};\n\nconst moveCursor = (leftOrRight, node) => {\n  let parent, rightOrLeft;\n  if (node[leftOrRight] !== null) {\n    parent = node;\n    node = node[leftOrRight];\n    node._iteratorParentNode = parent;\n    rightOrLeft = leftOrRight === 'left' ? 'right' : 'left';\n    node = descendAllTheWay(rightOrLeft, node);\n  } else {\n    while ((parent = node._iteratorParentNode) !== null && parent[leftOrRight] === node) {\n      node = parent;\n    }\n    node = parent; // either null or the correct-direction parent\n  }\n  return node;\n};\n\n// The BinaryTreeIterator actually writes to the tree: it maintains a\n// \"_iteratorParentNode\" variable on each node. Please ignore this.\nclass BinaryTreeIterator {\n  constructor(tree1, node1) {\n    this.tree = tree1;\n    this.node = node1;\n  }\n\n  next() {\n    if (this.node === null) {\n      return null;\n    } else {\n      const node = moveCursor('right', this.node);\n      return new BinaryTreeIterator(this.tree, node);\n    }\n  }\n\n  previous() {\n    if (this.node === null) {\n      if (this.tree.root === null) {\n        return null;\n      } else {\n        this.tree.root._iteratorParentNode = null;\n        const node = descendAllTheWay('right', this.tree.root);\n        return new BinaryTreeIterator(this.tree, node);\n      }\n    } else {\n      const node = moveCursor('left', this.node);\n      if (node === null) {\n        return null;\n      } else {\n        return new BinaryTreeIterator(this.tree, node);\n      }\n    }\n  }\n\n  hasNext() {\n    return this.node !== null;\n  }\n\n  hasPrevious() {\n    return this.previous() !== null;\n  }\n\n  value() {\n    if (this.node === null) {\n      return null;\n    } else {\n      return this.node.value;\n    }\n  }\n\n  setValue(value) {\n    if (!this.tree.options.allowSetValue) {\n      throw 'Must set options.allowSetValue';\n    }\n    if (!this.hasNext()) {\n      throw 'Cannot set value at end of set';\n    }\n    return this.node.value = value;\n  }\n\n};\n\nBinaryTreeIterator.find = function(tree, value, comparator) {\n  const root = tree.root;\n  if (root != null) {\n    root._iteratorParentNode = null;\n  }\n  let node = root;\n  let nextNode = null; // For finding an in-between node\n  while (node !== null) {\n    const cmp = comparator(value, node.value);\n    if (cmp === 0) {\n      break;\n    } else if (cmp < 0) {\n      if (node.left === null) {\n        break;\n      }\n      nextNode = node; // If we descend all right after this until there are\n      // no more right nodes, we want to return an\n      // \"in-between\" iterator ... pointing here.\n      node.left._iteratorParentNode = node;\n      node = node.left;\n    } else {\n      if (node.right !== null) {\n        node.right._iteratorParentNode = node;\n        node = node.right;\n      } else {\n        node = nextNode;\n        break;\n      }\n    }\n  }\n  return new BinaryTreeIterator(tree, node);\n};\n\nBinaryTreeIterator.left = (tree) => {\n  if (tree.root === null) {\n    return new BinaryTreeIterator(tree, null);\n  } else {\n    tree.root._iteratorParentNode = null;\n    const node = descendAllTheWay('left', tree.root);\n    return new BinaryTreeIterator(tree, node);\n  }\n};\n\nBinaryTreeIterator.right = (tree) => {\n  return new BinaryTreeIterator(tree, null);\n};\n\nexport default BinaryTreeIterator;\n","\nimport BinaryTreeIterator from './BinaryTreeIterator';\n\nconst binaryTreeTraverse = (node, callback) => {\n  if (node !== null) {\n    binaryTreeTraverse(node.left, callback);\n    callback(node.value);\n    binaryTreeTraverse(node.right, callback);\n  }\n};\n\n// An AbstractBinaryTree has a @root. @root is null or an object with\n// `.left`, `.right` and `.value` properties.\nclass AbstractBinaryTree {\n  toArray() {\n    const ret = [];\n    binaryTreeTraverse(this.root, function(value) {\n      return ret.push(value);\n    });\n    return ret;\n  }\n\n  clear() {\n    return this.root = null;\n  }\n\n  forEachImpl(callback, sortedSet, thisArg) {\n    let i = 0;\n    binaryTreeTraverse(this.root, function(value) {\n      callback.call(thisArg, value, i, sortedSet);\n      i += 1;\n    });\n  }\n\n  contains(value) {\n    const comparator = this.comparator;\n    let node = this.root;\n    while (node !== null) {\n      const cmp = comparator(value, node.value);\n      if (cmp === 0) {\n        break;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else {\n        node = node.right;\n      }\n    }\n    return node !== null && comparator(node.value, value) === 0;\n  }\n\n  findIterator(value) {\n    return BinaryTreeIterator.find(this, value, this.comparator);\n  }\n\n  beginIterator() {\n    return BinaryTreeIterator.left(this);\n  }\n\n  endIterator() {\n    return BinaryTreeIterator.right(this);\n  }\n\n};\n\nexport default AbstractBinaryTree;\n\n","import AbstractBinaryTreeStrategy from './AbstractBinaryTreeStrategy';\n\nclass Node {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n};\n\nconst nodeAllTheWay = (node, leftOrRight) => {\n  while (node[leftOrRight] !== null) {\n    node = node[leftOrRight];\n  }\n  return node;\n};\n\n// Returns the subtree, minus value\nconst binaryTreeDelete = (node, value, comparator) => {\n  if (node === null) {\n    throw 'Value not in set';\n  }\n  const cmp = comparator(value, node.value);\n  if (cmp < 0) {\n    node.left = binaryTreeDelete(node.left, value, comparator);\n  } else if (cmp > 0) {\n    node.right = binaryTreeDelete(node.right, value, comparator); // This is the value we want to remove\n  } else {\n    if (node.left === null && node.right === null) {\n      node = null;\n    } else if (node.right === null) {\n      node = node.left;\n    } else if (node.left === null) {\n      node = node.right;\n    } else {\n      const nextNode = nodeAllTheWay(node.right, 'left');\n      node.value = nextNode.value;\n      node.right = binaryTreeDelete(node.right, nextNode.value, comparator);\n    }\n  }\n  return node;\n};\n\nclass BinaryTreeStrategy extends AbstractBinaryTreeStrategy {\n  constructor(options) {\n    super();\n    this.options = options;\n    this.comparator = this.options.comparator;\n    this.onInsertConflict = this.options.onInsertConflict;\n    this.root = null;\n  }\n\n  insert(value) {\n    const compare = this.comparator;\n    if (this.root !== null) {\n      let parent = this.root;\n      let leftOrRight = null;\n      while (true) {\n        const cmp = compare(value, parent.value);\n        if (cmp === 0) {\n          parent.value = this.onInsertConflict(parent.value, value);\n          return;\n        } else {\n          leftOrRight = cmp < 0 ? 'left' : 'right';\n          if (parent[leftOrRight] === null) {\n            break;\n          }\n          parent = parent[leftOrRight];\n        }\n      }\n      return parent[leftOrRight] = new Node(value);\n    } else {\n      return this.root = new Node(value);\n    }\n  }\n\n  remove(value) {\n    return this.root = binaryTreeDelete(this.root, value, this.comparator);\n  }\n\n};\n\nexport default BinaryTreeStrategy;\n","\nimport AbstractBinaryTreeStrategy from './AbstractBinaryTreeStrategy';\n\n// An implementation of Left-Leaning Red-Black trees.\n\n// It's copied from http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf.\n// It's practically a copy-paste job, minus the semicolons. missing bits were\n// filled in with hints from\n// http://www.teachsolaisgames.com/articles/balanced_left_leaning.html\n\n// Here are some differences:\n// * This isn't a map structure: it's just a tree. There are no keys: the\n//   comparator applies to the values.\n// * We use the passed comparator.\nclass Node {\n  constructor(value1) {\n    this.value = value1;\n    this.left = null;\n    this.right = null;\n    this.isRed = true; // null nodes -- leaves -- are black\n  }\n\n};\n\nconst rotateLeft = (h) => {\n  const x = h.right;\n  h.right = x.left;\n  x.left = h;\n  x.isRed = h.isRed;\n  h.isRed = true;\n  return x;\n};\n\nconst rotateRight = (h) => {\n  const x = h.left;\n  h.left = x.right;\n  x.right = h;\n  x.isRed = h.isRed;\n  h.isRed = true;\n  return x;\n};\n\nconst colorFlip = (h) => {\n  h.isRed = !h.isRed;\n  h.left.isRed = !h.left.isRed;\n  h.right.isRed = !h.right.isRed;\n};\n\nconst moveRedLeft = (h) => {\n  //throw 'Preconditions failed' if !(!h.left.isRed && !h.left.left?.isRed)\n  colorFlip(h);\n  if (h.right !== null && h.right.left !== null && h.right.left.isRed) {\n    h.right = rotateRight(h.right);\n    h = rotateLeft(h);\n    colorFlip(h);\n  }\n  return h;\n};\n\nconst moveRedRight = (h) => {\n  //throw 'Preconditions failed' if !(!h.right.isRed && !h.right.left?.isRed)\n  colorFlip(h);\n  if (h.left !== null && h.left.left !== null && h.left.left.isRed) {\n    h = rotateRight(h);\n    colorFlip(h);\n  }\n  return h;\n};\n\nconst insertInNode = (h, value, compare, onInsertConflict) => {\n  if (h === null) {\n    return new Node(value);\n  }\n  //if h.left isnt null && h.left.isRed && h.right isnt null && h.right.isRed\n  //  colorFlip(h)\n  const cmp = compare(value, h.value);\n  if (cmp === 0) {\n    h.value = onInsertConflict(h.value, value);\n  } else if (cmp < 0) {\n    h.left = insertInNode(h.left, value, compare, onInsertConflict);\n  } else {\n    h.right = insertInNode(h.right, value, compare, onInsertConflict);\n  }\n  if (h.right !== null && h.right.isRed && !(h.left !== null && h.left.isRed)) {\n    h = rotateLeft(h);\n  }\n  if (h.left !== null && h.left.isRed && h.left.left !== null && h.left.left.isRed) {\n    h = rotateRight(h);\n  }\n  // Put this here -- I couldn't get the whole thing to work otherwise :(\n  if (h.left !== null && h.left.isRed && h.right !== null && h.right.isRed) {\n    colorFlip(h);\n  }\n  return h;\n};\n\nconst findMinNode = (h) => {\n  while (h.left !== null) {\n    h = h.left;\n  }\n  return h;\n};\n\nconst fixUp = (h) => {\n  // Fix right-leaning red nodes\n  if (h.right !== null && h.right.isRed) {\n    h = rotateLeft(h);\n  }\n  // Handle a 4-node that traverses down the left\n  if (h.left !== null && h.left.isRed && h.left.left !== null && h.left.left.isRed) {\n    h = rotateRight(h);\n  }\n  // split 4-nodes\n  if (h.left !== null && h.left.isRed && h.right !== null && h.right.isRed) {\n    colorFlip(h);\n  }\n  return h;\n};\n\nconst removeMinNode = (h) => {\n  if (h.left === null) {\n    return null;\n  }\n  if (!h.left.isRed && !(h.left.left !== null && h.left.left.isRed)) {\n    h = moveRedLeft(h);\n  }\n  h.left = removeMinNode(h.left);\n  return fixUp(h);\n};\n\nconst removeFromNode = (h, value, compare) => {\n  if (h === null) {\n    throw 'Value not in set';\n  }\n  if (compare(value, h.value) < 0) {\n    if (h.left === null) {\n      throw 'Value not in set';\n    }\n    if (!h.left.isRed && !(h.left.left !== null && h.left.left.isRed)) {\n      h = moveRedLeft(h);\n    }\n    h.left = removeFromNode(h.left, value, compare);\n  } else {\n    if (h.left !== null && h.left.isRed) {\n      h = rotateRight(h);\n    }\n    if (h.right === null) {\n      if (compare(value, h.value) === 0) {\n        return null; // leaf node; LLRB assures no left value here\n      } else {\n        throw 'Value not in set';\n      }\n    }\n    if (!h.right.isRed && !(h.right.left !== null && h.right.left.isRed)) {\n      h = moveRedRight(h);\n    }\n    if (compare(value, h.value) === 0) {\n      h.value = findMinNode(h.right).value;\n      h.right = removeMinNode(h.right);\n    } else {\n      h.right = removeFromNode(h.right, value, compare);\n    }\n  }\n  if (h !== null) {\n    h = fixUp(h);\n  }\n  return h;\n};\n\nclass RedBlackTreeStrategy extends AbstractBinaryTreeStrategy {\n  constructor(options) {\n    super();\n    this.options = options;\n    this.comparator = this.options.comparator;\n    this.onInsertConflict = this.options.onInsertConflict;\n    this.root = null;\n  }\n\n  insert(value) {\n    this.root = insertInNode(this.root, value, this.comparator, this.onInsertConflict);\n    this.root.isRed = false; // always\n  }\n\n  remove(value) {\n    this.root = removeFromNode(this.root, value, this.comparator);\n    if (this.root !== null) {\n      this.root.isRed = false;\n    }\n  }\n\n};\n\nexport default RedBlackTreeStrategy;\n","const InsertConflictResolvers = {\n  OnInsertConflictThrow: (oldValue, newValue) => { throw new Error(\"Value already in set\") },\n  OnInsertConflictReplace: (oldValue, newValue) => newValue,\n  OnInsertConflictIgnore: (oldValue, newValue) => oldValue,\n};\nexport default InsertConflictResolvers;\n","import AbstractSortedSet from './SortedSet/AbstractSortedSet';\nimport ArrayStrategy from './SortedSet/ArrayStrategy';\nimport BinaryTreeStrategy from './SortedSet/BinaryTreeStrategy';\nimport RedBlackTreeStrategy from './SortedSet/RedBlackTreeStrategy';\nimport InsertConflictResolvers from './SortedSet/InsertConflictResolvers';\n\nclass SortedSet extends AbstractSortedSet {\n  constructor(options) {\n    options || (options = {});\n    options.strategy || (options.strategy = RedBlackTreeStrategy);\n    options.comparator || (options.comparator = function(a, b) {\n      return (a || 0) - (b || 0);\n    });\n    options.onInsertConflict || (options.onInsertConflict = InsertConflictResolvers.OnInsertConflictThrow);\n    super(options);\n  }\n};\n\nSortedSet.ArrayStrategy = ArrayStrategy;\nSortedSet.BinaryTreeStrategy = BinaryTreeStrategy;\nSortedSet.RedBlackTreeStrategy = RedBlackTreeStrategy;\n\nObject.assign(SortedSet, InsertConflictResolvers);\n\nexport default SortedSet;\n\n"],"names":["AbstractSortedSet","constructor","options","strategy","comparator","onInsertConflict","priv","length","insert","value","remove","clear","contains","toArray","forEach","callback","thisArg","forEachImpl","map","ret","index","self","push","call","filter","every","some","findIterator","beginIterator","endIterator","Iterator","index1","data","hasNext","hasPrevious","setValue","allowSetValue","next","previous","binarySearchForIndex","array","low","high","mid","ArrayStrategy","splice","sortedSet","len","i","descendAllTheWay","leftOrRight","node","parent","_iteratorParentNode","moveCursor","rightOrLeft","BinaryTreeIterator","tree1","node1","tree","root","find","nextNode","cmp","left","right","binaryTreeTraverse","AbstractBinaryTree","Node","nodeAllTheWay","binaryTreeDelete","BinaryTreeStrategy","AbstractBinaryTreeStrategy","compare","value1","isRed","rotateLeft","h","x","rotateRight","colorFlip","moveRedLeft","moveRedRight","insertInNode","findMinNode","fixUp","removeMinNode","removeFromNode","RedBlackTreeStrategy","InsertConflictResolvers","OnInsertConflictThrow","oldValue","newValue","Error","OnInsertConflictReplace","OnInsertConflictIgnore","SortedSet","a","b","Object","assign"],"mappings":"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"}