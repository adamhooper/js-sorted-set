{"version":3,"file":"sorted-set.min.js","sources":["src/SortedSet/ArrayStrategy.js","src/SortedSet/BinaryTreeIterator.js","src/SortedSet/AbstractBinaryTreeStrategy.js","src/SortedSet/BinaryTreeStrategy.js","src/SortedSet/RedBlackTreeStrategy.js","src/insertConflictResolvers.js","src/SortedSet.js","src/SortedSet/AbstractSortedSet.js"],"sourcesContent":["\nclass Iterator {\n  constructor(priv, index1) {\n    this.priv = priv;\n    this.index = index1;\n    this.data = this.priv.data;\n  }\n\n  hasNext() {\n    return this.index < this.data.length;\n  }\n\n  hasPrevious() {\n    return this.index > 0;\n  }\n\n  value() {\n    if (this.index < this.data.length) {\n      return this.data[this.index];\n    } else {\n      return null;\n    }\n  }\n\n  setValue(value) {\n    if (!this.priv.options.allowSetValue) {\n      throw 'Must set options.allowSetValue';\n    }\n    if (!this.hasNext()) {\n      throw 'Cannot set value at end of set';\n    }\n    return this.data[this.index] = value;\n  }\n\n  next() {\n    if (this.index >= this.data.length) {\n      return null;\n    } else {\n      return new Iterator(this.priv, this.index + 1);\n    }\n  }\n\n  previous() {\n    if (this.index <= 0) {\n      return null;\n    } else {\n      return new Iterator(this.priv, this.index - 1);\n    }\n  }\n\n};\n\nconst binarySearchForIndex = (array, value, comparator) => {\n  var high, low, mid;\n  low = 0;\n  high = array.length;\n  while (low < high) {\n    mid = (low + high) >>> 1;\n    if (comparator(array[mid], value) < 0) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n  return low;\n};\n\nclass ArrayStrategy {\n  constructor(options) {\n    this.options = options;\n    this.onInsertConflict = this.options.onInsertConflict;\n    this.comparator = this.options.comparator;\n    this.data = [];\n  }\n\n  toArray() {\n    return this.data;\n  }\n\n  insert(value) {\n    var index;\n    index = binarySearchForIndex(this.data, value, this.comparator);\n    if (this.data[index] !== void 0 && this.comparator(this.data[index], value) === 0) {\n      return this.data.splice(index, 1, this.onInsertConflict(this.data[index], value));\n    } else {\n      return this.data.splice(index, 0, value);\n    }\n  }\n\n  remove(value) {\n    var index;\n    index = binarySearchForIndex(this.data, value, this.comparator);\n    if (this.data[index] !== value) {\n      throw 'Value not in set';\n    }\n    return this.data.splice(index, 1);\n  }\n\n  clear() {\n    return this.data.length = 0;\n  }\n\n  contains(value) {\n    var index;\n    index = binarySearchForIndex(this.data, value, this.comparator);\n    return this.index !== this.data.length && this.data[index] === value;\n  }\n\n  forEachImpl(callback, sortedSet, thisArg) {\n    var i, index, len, ref, value;\n    ref = this.data;\n    for (index = i = 0, len = ref.length; i < len; index = ++i) {\n      value = ref[index];\n      callback.call(thisArg, value, index, sortedSet);\n    }\n    return void 0;\n  }\n\n  findIterator(value) {\n    var index;\n    index = binarySearchForIndex(this.data, value, this.comparator);\n    return new Iterator(this, index);\n  }\n\n  beginIterator() {\n    return new Iterator(this, 0);\n  }\n\n  endIterator() {\n    return new Iterator(this, this.data.length);\n  }\n\n};\n\nexport default ArrayStrategy;\n","\nconst descendAllTheWay = (leftOrRight, node) => {\n  var parent;\n  // Assumes node._iteratorParentNode is set\n  while (node[leftOrRight] !== null) {\n    parent = node;\n    node = node[leftOrRight];\n    node._iteratorParentNode = parent;\n  }\n  return node;\n};\n\nconst moveCursor = (leftOrRight, node) => {\n  var parent, rightOrLeft;\n  if (node[leftOrRight] !== null) {\n    parent = node;\n    node = node[leftOrRight];\n    node._iteratorParentNode = parent;\n    rightOrLeft = leftOrRight === 'left' ? 'right' : 'left';\n    node = descendAllTheWay(rightOrLeft, node);\n  } else {\n    while ((parent = node._iteratorParentNode) !== null && parent[leftOrRight] === node) {\n      node = parent;\n    }\n    node = parent; // either null or the correct-direction parent\n  }\n  return node;\n};\n\n// The BinaryTreeIterator actually writes to the tree: it maintains a\n// \"_iteratorParentNode\" variable on each node. Please ignore this.\nclass BinaryTreeIterator {\n  constructor(tree1, node1) {\n    this.tree = tree1;\n    this.node = node1;\n  }\n\n  next() {\n    var node;\n    if (this.node === null) {\n      return null;\n    } else {\n      node = moveCursor('right', this.node);\n      return new BinaryTreeIterator(this.tree, node);\n    }\n  }\n\n  previous() {\n    var node;\n    if (this.node === null) {\n      if (this.tree.root === null) {\n        return null;\n      } else {\n        this.tree.root._iteratorParentNode = null;\n        node = descendAllTheWay('right', this.tree.root);\n        return new BinaryTreeIterator(this.tree, node);\n      }\n    } else {\n      node = moveCursor('left', this.node);\n      if (node === null) {\n        return null;\n      } else {\n        return new BinaryTreeIterator(this.tree, node);\n      }\n    }\n  }\n\n  hasNext() {\n    return this.node !== null;\n  }\n\n  hasPrevious() {\n    return this.previous() !== null;\n  }\n\n  value() {\n    if (this.node === null) {\n      return null;\n    } else {\n      return this.node.value;\n    }\n  }\n\n  setValue(value) {\n    if (!this.tree.options.allowSetValue) {\n      throw 'Must set options.allowSetValue';\n    }\n    if (!this.hasNext()) {\n      throw 'Cannot set value at end of set';\n    }\n    return this.node.value = value;\n  }\n\n};\n\nBinaryTreeIterator.find = function(tree, value, comparator) {\n  var cmp, nextNode, node, root;\n  root = tree.root;\n  if (root != null) {\n    root._iteratorParentNode = null;\n  }\n  node = root;\n  nextNode = null; // For finding an in-between node\n  while (node !== null) {\n    cmp = comparator(value, node.value);\n    if (cmp === 0) {\n      break;\n    } else if (cmp < 0) {\n      if (node.left === null) {\n        break;\n      }\n      nextNode = node; // If we descend all right after this until there are\n      // no more right nodes, we want to return an\n      // \"in-between\" iterator ... pointing here.\n      node.left._iteratorParentNode = node;\n      node = node.left;\n    } else {\n      if (node.right !== null) {\n        node.right._iteratorParentNode = node;\n        node = node.right;\n      } else {\n        node = nextNode;\n        break;\n      }\n    }\n  }\n  return new BinaryTreeIterator(tree, node);\n};\n\nBinaryTreeIterator.left = (tree) => {\n  var node;\n  if (tree.root === null) {\n    return new BinaryTreeIterator(tree, null);\n  } else {\n    tree.root._iteratorParentNode = null;\n    node = descendAllTheWay('left', tree.root);\n    return new BinaryTreeIterator(tree, node);\n  }\n};\n\nBinaryTreeIterator.right = (tree) => {\n  return new BinaryTreeIterator(tree, null);\n};\n\nexport default BinaryTreeIterator;\n\n","\nimport BinaryTreeIterator from './BinaryTreeIterator';\n\nconst binaryTreeTraverse = (node, callback) => {\n  if (node !== null) {\n    binaryTreeTraverse(node.left, callback);\n    callback(node.value);\n    binaryTreeTraverse(node.right, callback);\n  }\n  return void 0;\n};\n\n// An AbstractBinaryTree has a @root. @root is null or an object with\n// `.left`, `.right` and `.value` properties.\nclass AbstractBinaryTree {\n  toArray() {\n    var ret;\n    ret = [];\n    binaryTreeTraverse(this.root, function(value) {\n      return ret.push(value);\n    });\n    return ret;\n  }\n\n  clear() {\n    return this.root = null;\n  }\n\n  forEachImpl(callback, sortedSet, thisArg) {\n    var i;\n    i = 0;\n    binaryTreeTraverse(this.root, function(value) {\n      callback.call(thisArg, value, i, sortedSet);\n      return i += 1;\n    });\n    return void 0;\n  }\n\n  contains(value) {\n    var cmp, comparator, node;\n    comparator = this.comparator;\n    node = this.root;\n    while (node !== null) {\n      cmp = comparator(value, node.value);\n      if (cmp === 0) {\n        break;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else {\n        node = node.right;\n      }\n    }\n    return node !== null && node.value === value;\n  }\n\n  findIterator(value) {\n    return BinaryTreeIterator.find(this, value, this.comparator);\n  }\n\n  beginIterator() {\n    return BinaryTreeIterator.left(this);\n  }\n\n  endIterator() {\n    return BinaryTreeIterator.right(this);\n  }\n\n};\n\nexport default AbstractBinaryTree;\n\n","  \nimport AbstractBinaryTreeStrategy from './AbstractBinaryTreeStrategy';\n\nclass Node {\n  constructor(value1) {\n    this.value = value1;\n    this.left = null;\n    this.right = null;\n  }\n\n};\n\nconst nodeAllTheWay = (node, leftOrRight) => {\n  while (node[leftOrRight] !== null) {\n    node = node[leftOrRight];\n  }\n  return node;\n};\n\n// Returns the subtree, minus value\nconst binaryTreeDelete = (node, value, comparator) => {\n  var cmp, nextNode;\n  if (node === null) {\n    throw 'Value not in set';\n  }\n  cmp = comparator(value, node.value);\n  if (cmp < 0) {\n    node.left = binaryTreeDelete(node.left, value, comparator);\n  } else if (cmp > 0) {\n    node.right = binaryTreeDelete(node.right, value, comparator); // This is the value we want to remove\n  } else {\n    if (node.left === null && node.right === null) {\n      node = null;\n    } else if (node.right === null) {\n      node = node.left;\n    } else if (node.left === null) {\n      node = node.right;\n    } else {\n      nextNode = nodeAllTheWay(node.right, 'left');\n      node.value = nextNode.value;\n      node.right = binaryTreeDelete(node.right, nextNode.value, comparator);\n    }\n  }\n  return node;\n};\n\nclass BinaryTreeStrategy extends AbstractBinaryTreeStrategy {\n  constructor(options) {\n    super();\n    this.options = options;\n    this.comparator = this.options.comparator;\n    this.onInsertConflict = this.options.onInsertConflict;\n    this.root = null;\n  }\n\n  insert(value) {\n    var cmp, compare, leftOrRight, parent;\n    compare = this.comparator;\n    if (this.root != null) {\n      parent = this.root;\n      while (true) {\n        cmp = compare(value, parent.value);\n        if (cmp === 0) {\n          parent.value = this.onInsertConflict(parent.value, value);\n          return;\n        } else {\n          leftOrRight = cmp < 0 ? 'left' : 'right';\n          if (parent[leftOrRight] === null) {\n            break;\n          }\n          parent = parent[leftOrRight];\n        }\n      }\n      return parent[leftOrRight] = new Node(value);\n    } else {\n      return this.root = new Node(value);\n    }\n  }\n\n  remove(value) {\n    return this.root = binaryTreeDelete(this.root, value, this.comparator);\n  }\n\n};\n\nexport default BinaryTreeStrategy;\n","\nimport AbstractBinaryTreeStrategy from './AbstractBinaryTreeStrategy';\n\n// An implementation of Left-Leaning Red-Black trees.\n\n// It's copied from http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf.\n// It's practically a copy-paste job, minus the semicolons. missing bits were\n// filled in with hints from\n// http://www.teachsolaisgames.com/articles/balanced_left_leaning.html\n\n// Here are some differences:\n// * This isn't a map structure: it's just a tree. There are no keys: the\n//   comparator applies to the values.\n// * We use the passed comparator.\nclass Node {\n  constructor(value1) {\n    this.value = value1;\n    this.left = null;\n    this.right = null;\n    this.isRed = true; // null nodes -- leaves -- are black\n  }\n\n};\n\nconst rotateLeft = (h) => {\n  var x;\n  x = h.right;\n  h.right = x.left;\n  x.left = h;\n  x.isRed = h.isRed;\n  h.isRed = true;\n  return x;\n};\n\nconst rotateRight = (h) => {\n  var x;\n  x = h.left;\n  h.left = x.right;\n  x.right = h;\n  x.isRed = h.isRed;\n  h.isRed = true;\n  return x;\n};\n\nconst colorFlip = (h) => {\n  h.isRed = !h.isRed;\n  h.left.isRed = !h.left.isRed;\n  h.right.isRed = !h.right.isRed;\n  return void 0;\n};\n\nconst moveRedLeft = (h) => {\n  //throw 'Preconditions failed' if !(!h.left.isRed && !h.left.left?.isRed)\n  colorFlip(h);\n  if (h.right !== null && h.right.left !== null && h.right.left.isRed) {\n    h.right = rotateRight(h.right);\n    h = rotateLeft(h);\n    colorFlip(h);\n  }\n  return h;\n};\n\nconst moveRedRight = (h) => {\n  //throw 'Preconditions failed' if !(!h.right.isRed && !h.right.left?.isRed)\n  colorFlip(h);\n  if (h.left !== null && h.left.left !== null && h.left.left.isRed) {\n    h = rotateRight(h);\n    colorFlip(h);\n  }\n  return h;\n};\n\nconst insertInNode = (h, value, compare, onInsertConflict) => {\n  var cmp;\n  if (h === null) {\n    return new Node(value);\n  }\n  //if h.left isnt null && h.left.isRed && h.right isnt null && h.right.isRed\n  //  colorFlip(h)\n  cmp = compare(value, h.value);\n  if (cmp === 0) {\n    h.value = onInsertConflict(h.value, value);\n  } else if (cmp < 0) {\n    h.left = insertInNode(h.left, value, compare, onInsertConflict);\n  } else {\n    h.right = insertInNode(h.right, value, compare, onInsertConflict);\n  }\n  if (h.right !== null && h.right.isRed && !(h.left !== null && h.left.isRed)) {\n    h = rotateLeft(h);\n  }\n  if (h.left !== null && h.left.isRed && h.left.left !== null && h.left.left.isRed) {\n    h = rotateRight(h);\n  }\n  // Put this here -- I couldn't get the whole thing to work otherwise :(\n  if (h.left !== null && h.left.isRed && h.right !== null && h.right.isRed) {\n    colorFlip(h);\n  }\n  return h;\n};\n\nconst findMinNode = (h) => {\n  while (h.left !== null) {\n    h = h.left;\n  }\n  return h;\n};\n\nconst fixUp = (h) => {\n  // Fix right-leaning red nodes\n  if (h.right !== null && h.right.isRed) {\n    h = rotateLeft(h);\n  }\n  // Handle a 4-node that traverses down the left\n  if (h.left !== null && h.left.isRed && h.left.left !== null && h.left.left.isRed) {\n    h = rotateRight(h);\n  }\n  // split 4-nodes\n  if (h.left !== null && h.left.isRed && h.right !== null && h.right.isRed) {\n    colorFlip(h);\n  }\n  return h;\n};\n\nconst removeMinNode = (h) => {\n  if (h.left === null) {\n    return null;\n  }\n  if (!h.left.isRed && !(h.left.left !== null && h.left.left.isRed)) {\n    h = moveRedLeft(h);\n  }\n  h.left = removeMinNode(h.left);\n  return fixUp(h);\n};\n\nconst removeFromNode = (h, value, compare) => {\n  if (h === null) {\n    throw 'Value not in set';\n  }\n  if (h.value !== value && compare(value, h.value) < 0) {\n    if (h.left === null) {\n      throw 'Value not in set';\n    }\n    if (!h.left.isRed && !(h.left.left !== null && h.left.left.isRed)) {\n      h = moveRedLeft(h);\n    }\n    h.left = removeFromNode(h.left, value, compare);\n  } else {\n    if (h.left !== null && h.left.isRed) {\n      h = rotateRight(h);\n    }\n    if (h.right === null) {\n      if (value === h.value) {\n        return null; // leaf node; LLRB assures no left value here\n      } else {\n        throw 'Value not in set';\n      }\n    }\n    if (!h.right.isRed && !(h.right.left !== null && h.right.left.isRed)) {\n      h = moveRedRight(h);\n    }\n    if (value === h.value) {\n      h.value = findMinNode(h.right).value;\n      h.right = removeMinNode(h.right);\n    } else {\n      h.right = removeFromNode(h.right, value, compare);\n    }\n  }\n  if (h !== null) {\n    h = fixUp(h);\n  }\n  return h;\n};\n\nclass RedBlackTreeStrategy extends AbstractBinaryTreeStrategy {\n  constructor(options) {\n    super();\n    this.options = options;\n    this.comparator = this.options.comparator;\n    this.onInsertConflict = this.options.onInsertConflict;\n    this.root = null;\n  }\n\n  insert(value) {\n    this.root = insertInNode(this.root, value, this.comparator, this.onInsertConflict);\n    this.root.isRed = false; // always\n    return void 0;\n  }\n\n  remove(value) {\n    this.root = removeFromNode(this.root, value, this.comparator);\n    if (this.root !== null) {\n      this.root.isRed = false;\n    }\n    return void 0;\n  }\n\n};\n\nexport default RedBlackTreeStrategy;\n","\nconst throw_ = (oldValue, newValue) => {\n  throw 'Value already in set';\n};\n\nexport { throw_ as throw };\n\nexport const replace = (oldValue, newValue) => {\n  return newValue;\n};\n\nexport const ignore = (oldValue, newValue) => {\n  return oldValue;\n};\n\n","\nimport AbstractSortedSet from './SortedSet/AbstractSortedSet';\nimport ArrayStrategy from './SortedSet/ArrayStrategy';\nimport BinaryTreeStrategy from './SortedSet/BinaryTreeStrategy';\nimport RedBlackTreeStrategy from './SortedSet/RedBlackTreeStrategy';\nimport * as insertConflictResolvers from './insertConflictResolvers';\n\nclass SortedSet extends AbstractSortedSet {\n  constructor(options) {\n    options || (options = {});\n    options.strategy || (options.strategy = RedBlackTreeStrategy);\n    options.comparator || (options.comparator = function(a, b) {\n      return (a || 0) - (b || 0);\n    });\n    options.onInsertConflict || (options.onInsertConflict = insertConflictResolvers.throw);\n    super(options);\n  }\n};\n\nSortedSet.ArrayStrategy = ArrayStrategy;\nSortedSet.BinaryTreeStrategy = BinaryTreeStrategy;\nSortedSet.RedBlackTreeStrategy = RedBlackTreeStrategy;\n\nSortedSet.OnInsertConflictThrow = insertConflictResolvers.throw;\nSortedSet.OnInsertConflictReplace = insertConflictResolvers.replace;\nSortedSet.OnInsertConflictIgnore = insertConflictResolvers.ignore;\n\nexport default SortedSet;\n\n","\nclass AbstractSortedSet {\n  constructor(options) {\n    if ((options != null ? options.strategy : void 0) == null) {\n      throw 'Must pass options.strategy, a strategy';\n    }\n    if ((options != null ? options.comparator : void 0) == null) {\n      throw 'Must pass options.comparator, a comparator';\n    }\n    if ((options != null ? options.onInsertConflict : void 0) == null) {\n      throw 'Must pass options.onInsertConflict, a function';\n    }\n    this.priv = new options.strategy(options);\n    this.length = 0;\n  }\n\n  insert(value) {\n    this.priv.insert(value);\n    this.length += 1;\n    return this;\n  }\n\n  remove(value) {\n    this.priv.remove(value);\n    this.length -= 1;\n    return this;\n  }\n\n  clear() {\n    this.priv.clear();\n    this.length = 0;\n    return this;\n  }\n\n  contains(value) {\n    return this.priv.contains(value);\n  }\n\n  // Returns this set as an Array\n  toArray() {\n    return this.priv.toArray();\n  }\n\n  forEach(callback, thisArg) {\n    this.priv.forEachImpl(callback, this, thisArg);\n    return this;\n  }\n\n  map(callback, thisArg) {\n    var ret;\n    ret = [];\n    this.forEach(function(value, index, self) {\n      return ret.push(callback.call(thisArg, value, index, self));\n    });\n    return ret;\n  }\n\n  filter(callback, thisArg) {\n    var ret;\n    ret = [];\n    this.forEach(function(value, index, self) {\n      if (callback.call(thisArg, value, index, self)) {\n        return ret.push(value);\n      }\n    });\n    return ret;\n  }\n\n  every(callback, thisArg) {\n    var ret;\n    ret = true;\n    this.forEach(function(value, index, self) {\n      if (ret && !callback.call(thisArg, value, index, self)) {\n        return ret = false;\n      }\n    });\n    return ret;\n  }\n\n  some(callback, thisArg) {\n    var ret;\n    ret = false;\n    this.forEach(function(value, index, self) {\n      if (!ret && callback.call(thisArg, value, index, self)) {\n        return ret = true;\n      }\n    });\n    return ret;\n  }\n\n  // An iterator is similar to a C++ iterator: it points _before_ a value.\n\n  // So in this sorted set:\n\n  //   | 1 | 2 | 3 | 4 | 5 |\n  //   ^a      ^b          ^c\n\n  // `a` is a pointer to the beginning of the iterator. `a.value()` returns\n  // `3`. `a.previous()` returns `null`. `a.setValue()` works, if\n  // `options.allowSetValue` is true.\n\n  // `b` is a pointer to the value `3`. `a.previous()` and `a.next()` both do\n  // the obvious.\n\n  // `c` is a pointer to the `null` value. `c.previous()` works; `c.next()`\n  // returns null. `c.setValue()` throws an exception, even if\n  // `options.allowSetValue` is true.\n\n  // Iterators have `hasNext()` and `hasPrevious()` methods, too.\n\n  // Iterators are immutible. `iterator.next()` returns a new iterator.\n\n  // Iterators become invalid as soon as `insert()` or `remove()` is called.\n  findIterator(value) {\n    return this.priv.findIterator(value);\n  }\n\n  // Finds an iterator pointing to the lowest possible value.\n  beginIterator() {\n    return this.priv.beginIterator();\n  }\n\n  // Finds an iterator pointing to the `null` value.\n  endIterator() {\n    return this.priv.endIterator();\n  }\n\n};\n\nexport default AbstractSortedSet;\n\n"],"names":["Iterator","[object Object]","priv","index1","this","index","data","length","value","options","allowSetValue","hasNext","binarySearchForIndex","array","comparator","high","low","mid","descendAllTheWay","leftOrRight","node","parent","_iteratorParentNode","moveCursor","BinaryTreeIterator","tree1","node1","tree","root","previous","find","cmp","nextNode","left","right","binaryTreeTraverse","callback","AbstractBinaryTree","ret","push","sortedSet","thisArg","i","call","Node","value1","binaryTreeDelete","nodeAllTheWay","isRed","rotateLeft","h","x","rotateRight","colorFlip","moveRedLeft","insertInNode","compare","onInsertConflict","fixUp","removeMinNode","removeFromNode","moveRedRight","findMinNode","RedBlackTreeStrategy","AbstractBinaryTreeStrategy","super","throw_","oldValue","newValue","SortedSet","strategy","insert","remove","clear","contains","toArray","forEachImpl","forEach","self","findIterator","beginIterator","endIterator","a","b","insertConflictResolvers.throw","ArrayStrategy","splice","len","ref","BinaryTreeStrategy","OnInsertConflictThrow","OnInsertConflictReplace","OnInsertConflictIgnore"],"mappings":"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"}