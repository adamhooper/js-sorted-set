{"version":3,"file":"sorted-set.min.js","sources":["src/SortedSet/ArrayStrategy.js","src/SortedSet/BinaryTreeIterator.js","src/SortedSet/AbstractBinaryTreeStrategy.js","src/SortedSet/BinaryTreeStrategy.js","src/SortedSet/RedBlackTreeStrategy.js","src/SortedSet/InsertConflictResolvers.js","src/SortedSet.js","src/SortedSet/AbstractSortedSet.js"],"sourcesContent":["\nclass Iterator {\n  constructor(priv, index1) {\n    this.priv = priv;\n    this.index = index1;\n    this.data = this.priv.data;\n  }\n\n  hasNext() {\n    return this.index < this.data.length;\n  }\n\n  hasPrevious() {\n    return this.index > 0;\n  }\n\n  value() {\n    if (this.index < this.data.length) {\n      return this.data[this.index];\n    } else {\n      return null;\n    }\n  }\n\n  setValue(value) {\n    if (!this.priv.options.allowSetValue) {\n      throw 'Must set options.allowSetValue';\n    }\n    if (!this.hasNext()) {\n      throw 'Cannot set value at end of set';\n    }\n    return this.data[this.index] = value;\n  }\n\n  next() {\n    if (this.index >= this.data.length) {\n      return null;\n    } else {\n      return new Iterator(this.priv, this.index + 1);\n    }\n  }\n\n  previous() {\n    if (this.index <= 0) {\n      return null;\n    } else {\n      return new Iterator(this.priv, this.index - 1);\n    }\n  }\n\n};\n\nconst binarySearchForIndex = (array, value, comparator) => {\n  let low = 0;\n  let high = array.length;\n  while (low < high) {\n    const mid = (low + high) >>> 1;\n    if (comparator(array[mid], value) < 0) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n  return low;\n};\n\nclass ArrayStrategy {\n  constructor(options) {\n    this.options = options;\n    this.onInsertConflict = this.options.onInsertConflict;\n    this.comparator = this.options.comparator;\n    this.data = [];\n  }\n\n  toArray() {\n    return this.data;\n  }\n\n  insert(value) {\n    const index = binarySearchForIndex(this.data, value, this.comparator);\n    if (this.data[index] !== void 0 && this.comparator(this.data[index], value) === 0) {\n      return this.data.splice(index, 1, this.onInsertConflict(this.data[index], value));\n    } else {\n      return this.data.splice(index, 0, value);\n    }\n  }\n\n  remove(value) {\n    const index = binarySearchForIndex(this.data, value, this.comparator);\n    if (this.comparator(this.data[index], value) !== 0) {\n      throw 'Value not in set';\n    }\n    return this.data.splice(index, 1);\n  }\n\n  clear() {\n    return this.data.length = 0;\n  }\n\n  contains(value) {\n    const index = binarySearchForIndex(this.data, value, this.comparator);\n    return this.index !== this.data.length && this.comparator(this.data[index], value) === 0;\n  }\n\n  forEachImpl(callback, sortedSet, thisArg) {\n    const data = this.data;\n    const len = data.length;\n    for (let i = 0; i < len; i++) {\n      callback.call(thisArg, data[i], i, sortedSet);\n    }\n  }\n\n  findIterator(value) {\n    const index = binarySearchForIndex(this.data, value, this.comparator);\n    return new Iterator(this, index);\n  }\n\n  beginIterator() {\n    return new Iterator(this, 0);\n  }\n\n  endIterator() {\n    return new Iterator(this, this.data.length);\n  }\n};\n\nexport default ArrayStrategy;\n","const descendAllTheWay = (leftOrRight, node) => {\n  // Assumes node._iteratorParentNode is set\n  while (node[leftOrRight] !== null) {\n    const parent = node;\n    node = node[leftOrRight];\n    node._iteratorParentNode = parent;\n  }\n  return node;\n};\n\nconst moveCursor = (leftOrRight, node) => {\n  let parent, rightOrLeft;\n  if (node[leftOrRight] !== null) {\n    parent = node;\n    node = node[leftOrRight];\n    node._iteratorParentNode = parent;\n    rightOrLeft = leftOrRight === 'left' ? 'right' : 'left';\n    node = descendAllTheWay(rightOrLeft, node);\n  } else {\n    while ((parent = node._iteratorParentNode) !== null && parent[leftOrRight] === node) {\n      node = parent;\n    }\n    node = parent; // either null or the correct-direction parent\n  }\n  return node;\n};\n\n// The BinaryTreeIterator actually writes to the tree: it maintains a\n// \"_iteratorParentNode\" variable on each node. Please ignore this.\nclass BinaryTreeIterator {\n  constructor(tree1, node1) {\n    this.tree = tree1;\n    this.node = node1;\n  }\n\n  next() {\n    if (this.node === null) {\n      return null;\n    } else {\n      const node = moveCursor('right', this.node);\n      return new BinaryTreeIterator(this.tree, node);\n    }\n  }\n\n  previous() {\n    if (this.node === null) {\n      if (this.tree.root === null) {\n        return null;\n      } else {\n        this.tree.root._iteratorParentNode = null;\n        const node = descendAllTheWay('right', this.tree.root);\n        return new BinaryTreeIterator(this.tree, node);\n      }\n    } else {\n      const node = moveCursor('left', this.node);\n      if (node === null) {\n        return null;\n      } else {\n        return new BinaryTreeIterator(this.tree, node);\n      }\n    }\n  }\n\n  hasNext() {\n    return this.node !== null;\n  }\n\n  hasPrevious() {\n    return this.previous() !== null;\n  }\n\n  value() {\n    if (this.node === null) {\n      return null;\n    } else {\n      return this.node.value;\n    }\n  }\n\n  setValue(value) {\n    if (!this.tree.options.allowSetValue) {\n      throw 'Must set options.allowSetValue';\n    }\n    if (!this.hasNext()) {\n      throw 'Cannot set value at end of set';\n    }\n    return this.node.value = value;\n  }\n\n};\n\nBinaryTreeIterator.find = function(tree, value, comparator) {\n  const root = tree.root;\n  if (root != null) {\n    root._iteratorParentNode = null;\n  }\n  let node = root;\n  let nextNode = null; // For finding an in-between node\n  while (node !== null) {\n    const cmp = comparator(value, node.value);\n    if (cmp === 0) {\n      break;\n    } else if (cmp < 0) {\n      if (node.left === null) {\n        break;\n      }\n      nextNode = node; // If we descend all right after this until there are\n      // no more right nodes, we want to return an\n      // \"in-between\" iterator ... pointing here.\n      node.left._iteratorParentNode = node;\n      node = node.left;\n    } else {\n      if (node.right !== null) {\n        node.right._iteratorParentNode = node;\n        node = node.right;\n      } else {\n        node = nextNode;\n        break;\n      }\n    }\n  }\n  return new BinaryTreeIterator(tree, node);\n};\n\nBinaryTreeIterator.left = (tree) => {\n  if (tree.root === null) {\n    return new BinaryTreeIterator(tree, null);\n  } else {\n    tree.root._iteratorParentNode = null;\n    const node = descendAllTheWay('left', tree.root);\n    return new BinaryTreeIterator(tree, node);\n  }\n};\n\nBinaryTreeIterator.right = (tree) => {\n  return new BinaryTreeIterator(tree, null);\n};\n\nexport default BinaryTreeIterator;\n","\nimport BinaryTreeIterator from './BinaryTreeIterator';\n\nconst binaryTreeTraverse = (node, callback) => {\n  if (node !== null) {\n    binaryTreeTraverse(node.left, callback);\n    callback(node.value);\n    binaryTreeTraverse(node.right, callback);\n  }\n};\n\n// An AbstractBinaryTree has a @root. @root is null or an object with\n// `.left`, `.right` and `.value` properties.\nclass AbstractBinaryTree {\n  toArray() {\n    const ret = [];\n    binaryTreeTraverse(this.root, function(value) {\n      return ret.push(value);\n    });\n    return ret;\n  }\n\n  clear() {\n    return this.root = null;\n  }\n\n  forEachImpl(callback, sortedSet, thisArg) {\n    let i = 0;\n    binaryTreeTraverse(this.root, function(value) {\n      callback.call(thisArg, value, i, sortedSet);\n      i += 1;\n    });\n  }\n\n  contains(value) {\n    const comparator = this.comparator;\n    let node = this.root;\n    while (node !== null) {\n      const cmp = comparator(value, node.value);\n      if (cmp === 0) {\n        break;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else {\n        node = node.right;\n      }\n    }\n    return node !== null && comparator(node.value, value) === 0;\n  }\n\n  findIterator(value) {\n    return BinaryTreeIterator.find(this, value, this.comparator);\n  }\n\n  beginIterator() {\n    return BinaryTreeIterator.left(this);\n  }\n\n  endIterator() {\n    return BinaryTreeIterator.right(this);\n  }\n\n};\n\nexport default AbstractBinaryTree;\n\n","import AbstractBinaryTreeStrategy from './AbstractBinaryTreeStrategy';\n\nclass Node {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n};\n\nconst nodeAllTheWay = (node, leftOrRight) => {\n  while (node[leftOrRight] !== null) {\n    node = node[leftOrRight];\n  }\n  return node;\n};\n\n// Returns the subtree, minus value\nconst binaryTreeDelete = (node, value, comparator) => {\n  if (node === null) {\n    throw 'Value not in set';\n  }\n  const cmp = comparator(value, node.value);\n  if (cmp < 0) {\n    node.left = binaryTreeDelete(node.left, value, comparator);\n  } else if (cmp > 0) {\n    node.right = binaryTreeDelete(node.right, value, comparator); // This is the value we want to remove\n  } else {\n    if (node.left === null && node.right === null) {\n      node = null;\n    } else if (node.right === null) {\n      node = node.left;\n    } else if (node.left === null) {\n      node = node.right;\n    } else {\n      const nextNode = nodeAllTheWay(node.right, 'left');\n      node.value = nextNode.value;\n      node.right = binaryTreeDelete(node.right, nextNode.value, comparator);\n    }\n  }\n  return node;\n};\n\nclass BinaryTreeStrategy extends AbstractBinaryTreeStrategy {\n  constructor(options) {\n    super();\n    this.options = options;\n    this.comparator = this.options.comparator;\n    this.onInsertConflict = this.options.onInsertConflict;\n    this.root = null;\n  }\n\n  insert(value) {\n    const compare = this.comparator;\n    if (this.root !== null) {\n      let parent = this.root;\n      let leftOrRight = null;\n      while (true) {\n        const cmp = compare(value, parent.value);\n        if (cmp === 0) {\n          parent.value = this.onInsertConflict(parent.value, value);\n          return;\n        } else {\n          leftOrRight = cmp < 0 ? 'left' : 'right';\n          if (parent[leftOrRight] === null) {\n            break;\n          }\n          parent = parent[leftOrRight];\n        }\n      }\n      return parent[leftOrRight] = new Node(value);\n    } else {\n      return this.root = new Node(value);\n    }\n  }\n\n  remove(value) {\n    return this.root = binaryTreeDelete(this.root, value, this.comparator);\n  }\n\n};\n\nexport default BinaryTreeStrategy;\n","\nimport AbstractBinaryTreeStrategy from './AbstractBinaryTreeStrategy';\n\n// An implementation of Left-Leaning Red-Black trees.\n\n// It's copied from http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf.\n// It's practically a copy-paste job, minus the semicolons. missing bits were\n// filled in with hints from\n// http://www.teachsolaisgames.com/articles/balanced_left_leaning.html\n\n// Here are some differences:\n// * This isn't a map structure: it's just a tree. There are no keys: the\n//   comparator applies to the values.\n// * We use the passed comparator.\nclass Node {\n  constructor(value1) {\n    this.value = value1;\n    this.left = null;\n    this.right = null;\n    this.isRed = true; // null nodes -- leaves -- are black\n  }\n\n};\n\nconst rotateLeft = (h) => {\n  const x = h.right;\n  h.right = x.left;\n  x.left = h;\n  x.isRed = h.isRed;\n  h.isRed = true;\n  return x;\n};\n\nconst rotateRight = (h) => {\n  const x = h.left;\n  h.left = x.right;\n  x.right = h;\n  x.isRed = h.isRed;\n  h.isRed = true;\n  return x;\n};\n\nconst colorFlip = (h) => {\n  h.isRed = !h.isRed;\n  h.left.isRed = !h.left.isRed;\n  h.right.isRed = !h.right.isRed;\n};\n\nconst moveRedLeft = (h) => {\n  //throw 'Preconditions failed' if !(!h.left.isRed && !h.left.left?.isRed)\n  colorFlip(h);\n  if (h.right !== null && h.right.left !== null && h.right.left.isRed) {\n    h.right = rotateRight(h.right);\n    h = rotateLeft(h);\n    colorFlip(h);\n  }\n  return h;\n};\n\nconst moveRedRight = (h) => {\n  //throw 'Preconditions failed' if !(!h.right.isRed && !h.right.left?.isRed)\n  colorFlip(h);\n  if (h.left !== null && h.left.left !== null && h.left.left.isRed) {\n    h = rotateRight(h);\n    colorFlip(h);\n  }\n  return h;\n};\n\nconst insertInNode = (h, value, compare, onInsertConflict) => {\n  if (h === null) {\n    return new Node(value);\n  }\n  //if h.left isnt null && h.left.isRed && h.right isnt null && h.right.isRed\n  //  colorFlip(h)\n  const cmp = compare(value, h.value);\n  if (cmp === 0) {\n    h.value = onInsertConflict(h.value, value);\n  } else if (cmp < 0) {\n    h.left = insertInNode(h.left, value, compare, onInsertConflict);\n  } else {\n    h.right = insertInNode(h.right, value, compare, onInsertConflict);\n  }\n  if (h.right !== null && h.right.isRed && !(h.left !== null && h.left.isRed)) {\n    h = rotateLeft(h);\n  }\n  if (h.left !== null && h.left.isRed && h.left.left !== null && h.left.left.isRed) {\n    h = rotateRight(h);\n  }\n  // Put this here -- I couldn't get the whole thing to work otherwise :(\n  if (h.left !== null && h.left.isRed && h.right !== null && h.right.isRed) {\n    colorFlip(h);\n  }\n  return h;\n};\n\nconst findMinNode = (h) => {\n  while (h.left !== null) {\n    h = h.left;\n  }\n  return h;\n};\n\nconst fixUp = (h) => {\n  // Fix right-leaning red nodes\n  if (h.right !== null && h.right.isRed) {\n    h = rotateLeft(h);\n  }\n  // Handle a 4-node that traverses down the left\n  if (h.left !== null && h.left.isRed && h.left.left !== null && h.left.left.isRed) {\n    h = rotateRight(h);\n  }\n  // split 4-nodes\n  if (h.left !== null && h.left.isRed && h.right !== null && h.right.isRed) {\n    colorFlip(h);\n  }\n  return h;\n};\n\nconst removeMinNode = (h) => {\n  if (h.left === null) {\n    return null;\n  }\n  if (!h.left.isRed && !(h.left.left !== null && h.left.left.isRed)) {\n    h = moveRedLeft(h);\n  }\n  h.left = removeMinNode(h.left);\n  return fixUp(h);\n};\n\nconst removeFromNode = (h, value, compare) => {\n  if (h === null) {\n    throw 'Value not in set';\n  }\n  if (compare(value, h.value) < 0) {\n    if (h.left === null) {\n      throw 'Value not in set';\n    }\n    if (!h.left.isRed && !(h.left.left !== null && h.left.left.isRed)) {\n      h = moveRedLeft(h);\n    }\n    h.left = removeFromNode(h.left, value, compare);\n  } else {\n    if (h.left !== null && h.left.isRed) {\n      h = rotateRight(h);\n    }\n    if (h.right === null) {\n      if (compare(value, h.value) === 0) {\n        return null; // leaf node; LLRB assures no left value here\n      } else {\n        throw 'Value not in set';\n      }\n    }\n    if (!h.right.isRed && !(h.right.left !== null && h.right.left.isRed)) {\n      h = moveRedRight(h);\n    }\n    if (compare(value, h.value) === 0) {\n      h.value = findMinNode(h.right).value;\n      h.right = removeMinNode(h.right);\n    } else {\n      h.right = removeFromNode(h.right, value, compare);\n    }\n  }\n  if (h !== null) {\n    h = fixUp(h);\n  }\n  return h;\n};\n\nclass RedBlackTreeStrategy extends AbstractBinaryTreeStrategy {\n  constructor(options) {\n    super();\n    this.options = options;\n    this.comparator = this.options.comparator;\n    this.onInsertConflict = this.options.onInsertConflict;\n    this.root = null;\n  }\n\n  insert(value) {\n    this.root = insertInNode(this.root, value, this.comparator, this.onInsertConflict);\n    this.root.isRed = false; // always\n  }\n\n  remove(value) {\n    this.root = removeFromNode(this.root, value, this.comparator);\n    if (this.root !== null) {\n      this.root.isRed = false;\n    }\n  }\n\n};\n\nexport default RedBlackTreeStrategy;\n","const InsertConflictResolvers = {\n  OnInsertConflictThrow: (oldValue, newValue) => { throw new Error(\"Value already in set\") },\n  OnInsertConflictReplace: (oldValue, newValue) => newValue,\n  OnInsertConflictIgnore: (oldValue, newValue) => oldValue,\n};\nexport default InsertConflictResolvers;\n","import AbstractSortedSet from './SortedSet/AbstractSortedSet';\nimport ArrayStrategy from './SortedSet/ArrayStrategy';\nimport BinaryTreeStrategy from './SortedSet/BinaryTreeStrategy';\nimport RedBlackTreeStrategy from './SortedSet/RedBlackTreeStrategy';\nimport InsertConflictResolvers from './SortedSet/InsertConflictResolvers';\n\nclass SortedSet extends AbstractSortedSet {\n  constructor(options) {\n    options || (options = {});\n    options.strategy || (options.strategy = RedBlackTreeStrategy);\n    options.comparator || (options.comparator = function(a, b) {\n      return (a || 0) - (b || 0);\n    });\n    options.onInsertConflict || (options.onInsertConflict = InsertConflictResolvers.OnInsertConflictThrow);\n    super(options);\n  }\n};\n\nSortedSet.ArrayStrategy = ArrayStrategy;\nSortedSet.BinaryTreeStrategy = BinaryTreeStrategy;\nSortedSet.RedBlackTreeStrategy = RedBlackTreeStrategy;\n\nObject.assign(SortedSet, InsertConflictResolvers);\n\nexport default SortedSet;\n\n","\nclass AbstractSortedSet {\n  constructor(options) {\n    if ((options != null ? options.strategy : void 0) == null) {\n      throw 'Must pass options.strategy, a strategy';\n    }\n    if ((options != null ? options.comparator : void 0) == null) {\n      throw 'Must pass options.comparator, a comparator';\n    }\n    if ((options != null ? options.onInsertConflict : void 0) == null) {\n      throw 'Must pass options.onInsertConflict, a function';\n    }\n    this.priv = new options.strategy(options);\n    this.length = 0;\n  }\n\n  insert(value) {\n    this.priv.insert(value);\n    this.length += 1;\n    return this;\n  }\n\n  remove(value) {\n    this.priv.remove(value);\n    this.length -= 1;\n    return this;\n  }\n\n  clear() {\n    this.priv.clear();\n    this.length = 0;\n    return this;\n  }\n\n  contains(value) {\n    return this.priv.contains(value);\n  }\n\n  // Returns this set as an Array\n  toArray() {\n    return this.priv.toArray();\n  }\n\n  forEach(callback, thisArg) {\n    this.priv.forEachImpl(callback, this, thisArg);\n    return this;\n  }\n\n  map(callback, thisArg) {\n    const ret = [];\n    this.forEach(function(value, index, self) {\n      return ret.push(callback.call(thisArg, value, index, self));\n    });\n    return ret;\n  }\n\n  filter(callback, thisArg) {\n    const ret = [];\n    this.forEach(function(value, index, self) {\n      if (callback.call(thisArg, value, index, self)) {\n        return ret.push(value);\n      }\n    });\n    return ret;\n  }\n\n  every(callback, thisArg) {\n    let ret = true;\n    this.forEach(function(value, index, self) {\n      if (ret && !callback.call(thisArg, value, index, self)) {\n        ret = false;\n      }\n    });\n    return ret;\n  }\n\n  some(callback, thisArg) {\n    let ret = false;\n    this.forEach(function(value, index, self) {\n      if (!ret && callback.call(thisArg, value, index, self)) {\n        ret = true;\n      }\n    });\n    return ret;\n  }\n\n  // An iterator is similar to a C++ iterator: it points _before_ a value.\n\n  // So in this sorted set:\n\n  //   | 1 | 2 | 3 | 4 | 5 |\n  //   ^a      ^b          ^c\n\n  // `a` is a pointer to the beginning of the iterator. `a.value()` returns\n  // `3`. `a.previous()` returns `null`. `a.setValue()` works, if\n  // `options.allowSetValue` is true.\n\n  // `b` is a pointer to the value `3`. `a.previous()` and `a.next()` both do\n  // the obvious.\n\n  // `c` is a pointer to the `null` value. `c.previous()` works; `c.next()`\n  // returns null. `c.setValue()` throws an exception, even if\n  // `options.allowSetValue` is true.\n\n  // Iterators have `hasNext()` and `hasPrevious()` methods, too.\n\n  // Iterators are immutible. `iterator.next()` returns a new iterator.\n\n  // Iterators become invalid as soon as `insert()` or `remove()` is called.\n  findIterator(value) {\n    return this.priv.findIterator(value);\n  }\n\n  // Finds an iterator pointing to the lowest possible value.\n  beginIterator() {\n    return this.priv.beginIterator();\n  }\n\n  // Finds an iterator pointing to the `null` value.\n  endIterator() {\n    return this.priv.endIterator();\n  }\n\n};\n\nexport default AbstractSortedSet;\n\n"],"names":["Iterator","constructor","priv","index1","index","data","this","hasNext","length","hasPrevious","value","setValue","options","allowSetValue","next","previous","binarySearchForIndex","array","comparator","low","high","mid","descendAllTheWay","leftOrRight","node","parent","_iteratorParentNode","moveCursor","rightOrLeft","BinaryTreeIterator","tree1","node1","tree","root","find","nextNode","cmp","left","right","binaryTreeTraverse","callback","AbstractBinaryTree","toArray","ret","push","clear","forEachImpl","sortedSet","thisArg","i","call","contains","findIterator","beginIterator","endIterator","Node","binaryTreeDelete","nodeAllTheWay","value1","isRed","rotateLeft","h","x","rotateRight","colorFlip","moveRedLeft","insertInNode","compare","onInsertConflict","fixUp","removeMinNode","removeFromNode","moveRedRight","findMinNode","RedBlackTreeStrategy","AbstractBinaryTreeStrategy","insert","remove","InsertConflictResolvers","OnInsertConflictThrow","oldValue","newValue","Error","OnInsertConflictReplace","OnInsertConflictIgnore","SortedSet","strategy","forEach","map","self","filter","every","some","a","b","ArrayStrategy","splice","len","BinaryTreeStrategy","Object","assign"],"mappings":"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"}