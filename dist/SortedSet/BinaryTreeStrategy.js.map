{
  "version": 3,
  "file": "BinaryTreeStrategy.js",
  "sourceRoot": "../..",
  "sources": [
    "src/SortedSet/BinaryTreeStrategy.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nAbstractBinaryTreeStrategy = require('./AbstractBinaryTreeStrategy')\n\nclass Node\n  constructor: (@value) ->\n    @left = null\n    @right = null\n\nnodeAllTheWay = (node, leftOrRight) ->\n  while node[leftOrRight] isnt null\n    node = node[leftOrRight]\n  node\n\n# Returns the subtree, minus value\nbinaryTreeDelete = (node, value, comparator) ->\n  throw 'Value not in set' if node is null\n\n  cmp = comparator(value, node.value)\n  if cmp < 0\n    node.left = binaryTreeDelete(node.left, value, comparator)\n  else if cmp > 0\n    node.right = binaryTreeDelete(node.right, value, comparator)\n  else # This is the value we want to remove\n    if node.left is null && node.right is null\n      node = null\n    else if node.right is null\n      node = node.left\n    else if node.left is null\n      node = node.right\n    else\n      nextNode = nodeAllTheWay(node.right, 'left')\n      node.value = nextNode.value\n      node.right = binaryTreeDelete(node.right, nextNode.value, comparator)\n\n  node\n\nclass BinaryTreeStrategy extends AbstractBinaryTreeStrategy\n  constructor: (@options) ->\n    super()\n    @comparator = @options.comparator\n    @onInsertConflict = @options.onInsertConflict\n    @root = null\n\n  insert: (value) ->\n    compare = @comparator\n    if @root?\n      parent = @root\n      loop\n        cmp = compare(value, parent.value)\n        if cmp == 0\n          parent.value = @onInsertConflict(parent.value, value)\n          return\n        else\n          leftOrRight = if cmp < 0 then 'left' else 'right'\n          break if parent[leftOrRight] == null\n          parent = parent[leftOrRight]\n      parent[leftOrRight] = new Node(value)\n    else\n      @root = new Node(value)\n\n  remove: (value) ->\n    @root = binaryTreeDelete(@root, value, @comparator)\n\nmodule.exports = BinaryTreeStrategy\n"
  ]
}