{
  "version": 3,
  "file": "BinaryTreeIterator.js",
  "sourceRoot": "../..",
  "sources": [
    "src/SortedSet/BinaryTreeIterator.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "descendAllTheWay = (leftOrRight, node) ->\n  # Assumes node._iteratorParentNode is set\n  while node[leftOrRight] isnt null\n    parent = node\n    node = node[leftOrRight]\n    node._iteratorParentNode = parent\n  node\n\nmoveCursor = (leftOrRight, node) ->\n  if node[leftOrRight] isnt null\n    parent = node\n    node = node[leftOrRight]\n    node._iteratorParentNode = parent\n    rightOrLeft = if leftOrRight == 'left' then 'right' else 'left'\n    node = descendAllTheWay(rightOrLeft, node)\n  else\n    while (parent = node._iteratorParentNode) isnt null && parent[leftOrRight] is node\n      node = parent\n    node = parent # either null or the correct-direction parent\n\n  node\n\n# The BinaryTreeIterator actually writes to the tree: it maintains a\n# \"_iteratorParentNode\" variable on each node. Please ignore this.\nclass BinaryTreeIterator\n  constructor: (@tree, @node) ->\n\n  next: ->\n    if @node is null\n      null\n    else\n      node = moveCursor('right', @node)\n      new BinaryTreeIterator(@tree, node)\n\n  previous: ->\n    if @node is null\n      if @tree.root is null\n        null\n      else\n        @tree.root._iteratorParentNode = null\n        node = descendAllTheWay('right', @tree.root)\n        new BinaryTreeIterator(@tree, node)\n    else\n      node = moveCursor('left', @node)\n      if node is null\n        null\n      else\n        new BinaryTreeIterator(@tree, node)\n\n  hasNext: -> @node isnt null\n  hasPrevious: -> @previous() isnt null\n  value: -> if @node is null then null else @node.value\n  setValue: (value) ->\n    throw 'Must set options.allowSetValue' if !@tree.options.allowSetValue\n    throw 'Cannot set value at end of set' if !@hasNext()\n    @node.value = value\n\nBinaryTreeIterator.find = (tree, value, comparator) ->\n  root = tree.root\n  root?._iteratorParentNode = null\n  node = root\n  nextNode = null # For finding an in-between node\n  while node isnt null\n    cmp = comparator(value, node.value)\n    if cmp == 0\n      break\n    else if cmp < 0\n      break if node.left is null\n\n      nextNode = node # If we descend all right after this until there are\n                      # no more right nodes, we want to return an\n                      # \"in-between\" iterator ... pointing here.\n      node.left._iteratorParentNode = node\n      node = node.left\n    else\n      if node.right isnt null\n        node.right._iteratorParentNode = node\n        node = node.right\n      else\n        node = nextNode\n        break\n\n  return new BinaryTreeIterator(tree, node)\n\nBinaryTreeIterator.left = (tree) ->\n  if tree.root is null\n    new BinaryTreeIterator(tree, null)\n  else\n    tree.root._iteratorParentNode = null\n    node = descendAllTheWay('left', tree.root)\n    new BinaryTreeIterator(tree, node)\n\nBinaryTreeIterator.right = (tree) ->\n  new BinaryTreeIterator(tree, null)\n\nmodule.exports = BinaryTreeIterator\n"
  ]
}