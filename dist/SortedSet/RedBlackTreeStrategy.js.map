{
  "version": 3,
  "file": "RedBlackTreeStrategy.js",
  "sourceRoot": "../..",
  "sources": [
    "src/SortedSet/RedBlackTreeStrategy.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nAbstractBinaryTreeStrategy = require('./AbstractBinaryTreeStrategy')\n\n# An implementation of Left-Leaning Red-Black trees.\n#\n# It's copied from http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf.\n# It's practically a copy-paste job, minus the semicolons. missing bits were\n# filled in with hints from\n# http://www.teachsolaisgames.com/articles/balanced_left_leaning.html\n#\n# Here are some differences:\n# * This isn't a map structure: it's just a tree. There are no keys: the\n#   comparator applies to the values.\n# * We use the passed comparator.\n\nclass Node\n  constructor: (@value) ->\n    @left = null\n    @right = null\n    @isRed = true # null nodes -- leaves -- are black\n\nrotateLeft = (h) ->\n  x = h.right\n  h.right = x.left\n  x.left = h\n  x.isRed = h.isRed\n  h.isRed = true\n  x\n\nrotateRight = (h) ->\n  x = h.left\n  h.left = x.right\n  x.right = h\n  x.isRed = h.isRed\n  h.isRed = true\n  x\n\ncolorFlip = (h) ->\n  h.isRed = !h.isRed\n  h.left.isRed = !h.left.isRed\n  h.right.isRed = !h.right.isRed\n  undefined\n\nmoveRedLeft = (h) ->\n  #throw 'Preconditions failed' if !(!h.left.isRed && !h.left.left?.isRed)\n  colorFlip(h)\n  if h.right isnt null && h.right.left isnt null && h.right.left.isRed\n    h.right = rotateRight(h.right)\n    h = rotateLeft(h)\n    colorFlip(h)\n  h\n\nmoveRedRight = (h) ->\n  #throw 'Preconditions failed' if !(!h.right.isRed && !h.right.left?.isRed)\n  colorFlip(h)\n  if h.left isnt null && h.left.left isnt null && h.left.left.isRed\n    h = rotateRight(h)\n    colorFlip(h)\n  h\n\ninsertInNode = (h, value, compare, onInsertConflict) ->\n  if h is null\n    return new Node(value)\n\n  #if h.left isnt null && h.left.isRed && h.right isnt null && h.right.isRed\n  #  colorFlip(h)\n\n  cmp = compare(value, h.value)\n\n  if cmp == 0\n    h.value = onInsertConflict(h.value, value)\n  else if cmp < 0\n    h.left = insertInNode(h.left, value, compare, onInsertConflict)\n  else\n    h.right = insertInNode(h.right, value, compare, onInsertConflict)\n\n  if h.right isnt null && h.right.isRed && !(h.left isnt null && h.left.isRed)\n    h = rotateLeft(h)\n\n  if h.left isnt null && h.left.isRed && h.left.left isnt null && h.left.left.isRed\n    h = rotateRight(h)\n\n  # Put this here -- I couldn't get the whole thing to work otherwise :(\n  if h.left isnt null && h.left.isRed && h.right isnt null && h.right.isRed\n    colorFlip(h)\n\n  h\n\nfindMinNode = (h) ->\n  while h.left isnt null\n    h = h.left\n  h\n\nfixUp = (h) ->\n  # Fix right-leaning red nodes\n  if h.right isnt null && h.right.isRed\n    h = rotateLeft(h)\n\n  # Handle a 4-node that traverses down the left\n  if h.left isnt null && h.left.isRed && h.left.left isnt null && h.left.left.isRed\n    h = rotateRight(h)\n\n  # split 4-nodes\n  if h.left isnt null && h.left.isRed && h.right isnt null && h.right.isRed\n    colorFlip(h)\n\n  h\n\nremoveMinNode = (h) ->\n  if h.left is null\n    return null\n\n  if !h.left.isRed && !(h.left.left isnt null && h.left.left.isRed)\n    h = moveRedLeft(h)\n\n  h.left = removeMinNode(h.left)\n\n  fixUp(h)\n\nremoveFromNode = (h, value, compare) ->\n  throw 'Value not in set' if h is null\n\n  if h.value isnt value && compare(value, h.value) < 0\n    throw 'Value not in set' if h.left is null\n    if !h.left.isRed && !(h.left.left isnt null && h.left.left.isRed)\n      h = moveRedLeft(h)\n    h.left = removeFromNode(h.left, value, compare)\n  else\n    if h.left isnt null && h.left.isRed\n      h = rotateRight(h)\n\n    if h.right is null\n      if value is h.value\n        return null # leaf node; LLRB assures no left value here\n      else\n        throw 'Value not in set'\n\n    if !h.right.isRed && !(h.right.left isnt null && h.right.left.isRed)\n      h = moveRedRight(h)\n    if value is h.value\n      h.value = findMinNode(h.right).value\n      h.right = removeMinNode(h.right)\n    else\n      h.right = removeFromNode(h.right, value, compare)\n\n  h = fixUp(h) if h isnt null\n\n  h\n\nmodule.exports = class RedBlackTreeStrategy extends AbstractBinaryTreeStrategy\n  constructor: (@options) ->\n    super()\n    @comparator = @options.comparator\n    @onInsertConflict = @options.onInsertConflict\n    @root = null\n\n  insert: (value) ->\n    @root = insertInNode(@root, value, @comparator, @onInsertConflict)\n    @root.isRed = false # always\n    undefined\n\n  remove: (value) ->\n    @root = removeFromNode(@root, value, @comparator)\n    @root.isRed = false if @root isnt null\n    undefined\n"
  ]
}