{
  "version": 3,
  "file": "AbstractSortedSet.js",
  "sourceRoot": "../..",
  "sources": [
    "src/SortedSet/AbstractSortedSet.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "module.exports = class AbstractSortedSet\n  constructor: (options) ->\n    throw 'Must pass options.strategy, a strategy' if !options?.strategy?\n    throw 'Must pass options.comparator, a comparator' if !options?.comparator?\n    throw 'Must pass options.onInsertConflict, a function' if !options?.onInsertConflict?\n    @priv = new options.strategy(options)\n    @length = 0\n\n  insert: (value) ->\n    @priv.insert(value)\n    @length += 1\n    this\n\n  remove: (value) ->\n    @priv.remove(value)\n    @length -= 1\n    this\n\n  clear: ->\n    @priv.clear()\n    @length = 0\n    this\n\n  contains: (value) ->\n    @priv.contains(value)\n\n  # Returns this set as an Array\n  toArray: -> @priv.toArray()\n\n  forEach: (callback, thisArg) ->\n    @priv.forEachImpl(callback, this, thisArg)\n    this\n\n  map: (callback, thisArg) ->\n    ret = []\n    @forEach (value, index, self) ->\n      ret.push(callback.call(thisArg, value, index, self))\n    ret\n\n  filter: (callback, thisArg) ->\n    ret = []\n    @forEach (value, index, self) ->\n      ret.push(value) if callback.call(thisArg, value, index, self)\n    ret\n\n  every: (callback, thisArg) ->\n    ret = true\n    @forEach (value, index, self) ->\n      ret = false if ret && !callback.call(thisArg, value, index, self)\n    ret\n\n  some: (callback, thisArg) ->\n    ret = false\n    @forEach (value, index, self) ->\n      ret = true if !ret && callback.call(thisArg, value, index, self)\n    ret\n\n  # An iterator is similar to a C++ iterator: it points _before_ a value.\n  #\n  # So in this sorted set:\n  #\n  #   | 1 | 2 | 3 | 4 | 5 |\n  #   ^a      ^b          ^c\n  #\n  # `a` is a pointer to the beginning of the iterator. `a.value()` returns\n  # `3`. `a.previous()` returns `null`. `a.setValue()` works, if\n  # `options.allowSetValue` is true.\n  # \n  # `b` is a pointer to the value `3`. `a.previous()` and `a.next()` both do\n  # the obvious.\n  #\n  # `c` is a pointer to the `null` value. `c.previous()` works; `c.next()`\n  # returns null. `c.setValue()` throws an exception, even if\n  # `options.allowSetValue` is true.\n  #\n  # Iterators have `hasNext()` and `hasPrevious()` methods, too.\n  #\n  # Iterators are immutible. `iterator.next()` returns a new iterator.\n  #\n  # Iterators become invalid as soon as `insert()` or `remove()` is called.\n  findIterator: (value) ->\n    @priv.findIterator(value)\n\n  # Finds an iterator pointing to the lowest possible value.\n  beginIterator: ->\n    @priv.beginIterator()\n\n  # Finds an iterator pointing to the `null` value.\n  endIterator: ->\n    @priv.endIterator()\n"
  ]
}