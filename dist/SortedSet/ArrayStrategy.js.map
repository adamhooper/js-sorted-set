{
  "version": 3,
  "file": "ArrayStrategy.js",
  "sourceRoot": "../..",
  "sources": [
    "src/SortedSet/ArrayStrategy.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nclass Iterator\n  constructor: (@priv, @index) ->\n    @data = @priv.data\n\n  hasNext: -> @index < @data.length\n  hasPrevious: -> @index > 0\n  value: -> if @index < @data.length then @data[@index] else null\n  setValue: (value) ->\n    throw 'Must set options.allowSetValue' if !@priv.options.allowSetValue\n    throw 'Cannot set value at end of set' if !@hasNext()\n    @data[@index] = value\n\n  next: ->\n    if @index >= @data.length\n      null\n    else\n      new Iterator(@priv, @index + 1)\n\n  previous: ->\n    if @index <= 0\n      null\n    else\n      new Iterator(@priv, @index - 1)\n\nbinarySearchForIndex = (array, value, comparator) ->\n  low = 0\n  high = array.length\n  while low < high\n    mid = (low + high) >>> 1\n    if comparator(array[mid], value) < 0\n      low = mid + 1\n    else\n      high = mid\n  low\n\nclass ArrayStrategy\n  constructor: (@options) ->\n    @onInsertConflict = @options.onInsertConflict\n    @comparator = @options.comparator\n    @data = []\n\n  toArray: -> @data\n\n  insert: (value) ->\n    index = binarySearchForIndex(@data, value, @comparator)\n    if @data[index] != undefined and @comparator(@data[index], value) == 0\n      @data.splice(index, 1, @onInsertConflict(@data[index], value))\n    else\n      @data.splice(index, 0, value)\n\n  remove: (value) ->\n    index = binarySearchForIndex(@data, value, @comparator)\n    throw 'Value not in set' if @data[index] != value\n    @data.splice(index, 1)\n\n  clear: ->\n    @data.length = 0\n\n  contains: (value) ->\n    index = binarySearchForIndex(@data, value, @comparator)\n    @index != @data.length && @data[index] == value\n\n  forEachImpl: (callback, sortedSet, thisArg) ->\n    for value, index in @data\n      callback.call(thisArg, value, index, sortedSet)\n    undefined\n\n  findIterator: (value) ->\n    index = binarySearchForIndex(@data, value, @comparator)\n    new Iterator(this, index)\n\n  beginIterator: -> new Iterator(this, 0)\n  endIterator: -> new Iterator(this, @data.length)\n\nmodule.exports = ArrayStrategy\n"
  ]
}